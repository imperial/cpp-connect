// From https://authjs.dev/getting-started/adapters/prisma - allow Auth.js to use the database for user storage
// NOTE: TRY NOT TO MODIFY THIS!
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  role Role

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  studentProfile   StudentProfile? // Student Profile

  // We use a custom SQL Check constraint to ensure that the associatedCompanyId is only set
  // when the role is COMPANY
  // and not set when the role is STUDENT or ADMIN.
  // This CHECK is included in the migration for it.
  associatedCompanyId Int?
  associatedCompany CompanyProfile? @relation(fields: [associatedCompanyId], references: [id])
}

enum Role {
  STUDENT
  COMPANY
  ADMIN
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
